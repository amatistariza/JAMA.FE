server {
    listen 80;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html index.htm;
    # If the request is exactly for the site root, redirect the client to /login.
    # Use a temporary redirect (302) so browsers don't cache it permanently while
    # you may still be iterating on routes.
    location = / {
        return 302 /login;
    }

    location / {
        # Avoid nginx issuing a 301 redirect when a directory exists (which would
        # create an absolute redirect to http://localhost/login/ and drop the
        # client's port). Instead, try the uri, then look for an index file
        # inside the directory, and finally fallback to index.html for the SPA.
        absolute_redirect off;
        try_files $uri $uri/index.html /index.html;
    }

    # Proxy API requests to backend running on the Docker host (localhost:5000 on Windows).
    # Inside Docker Desktop containers, use host.docker.internal to reach the host machine.
    location /api/ {
        # Forward original host and scheme so upstream (if any) can reconstruct the
        # original request. Keep the original Host value when possible.
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        # Proxy to host machine (works on Docker Desktop for Windows / Mac).
        proxy_pass http://host.docker.internal:5000$request_uri;
    }
}
